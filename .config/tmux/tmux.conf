# 24-bit Color
set-option -sa terminal-overrides ",xterm*:Tc"
set -g extended-keys on
set -ag terminal-features "xterm-ghostty:extkeys" # Makes Ctrl+Shift+BS work properly

# Plugin Manager
# prefix U "all" to update all
set -g @plugin 'tmux-plugins/tpm'
run '~/.config/tmux/plugins/tpm/tpm'

# Set Theme (Repository must be Git cloned first)
set -g @plugin 'xfxr/tmux-power'
set -g @tmux_power_theme '#d598ff'
run-shell "~/.config/tmux/plugins/tmux-power/tmux-power.tmux"

# Set Prefix
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# Stolen from Sensible
set -s escape-time 0
set -g history-limit 50000
set -g display-time 4000
set -g status-interval 5
set -g focus-events on
setw -g aggressive-resize on

# Enable Mouse
set -g mouse on

# Set 1 Indexing
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# Unbind some defaults
unbind-key '"'
unbind-key c
unbind-key %

# Pane Management
bind - split-window -v -c "#{pane_current_path}"
bind-key '\' split-window -h -c "#{pane_current_path}"

bind o resize-pane -Z
# bind-key x confirm-before -p "Kill this pane? (y/n)" kill-pane
bind-key x kill-pane

# Window/Tab Management
bind-key t new-window
bind-key z confirm-before -p "Kill this window? (y/n)" kill-window

# Other Maps
# NOTE: For troubleshooting purposes this doesn't... really work. You have to exit tmux in all
# terminals
bind-key r source-file $HOME/.config/tmux/tmux.conf \; display-message "Tmux config reloaded"
# bind-key R run-shell 'for i in $(tmux list-windows -F "#{window_id}"); do tmux send-keys -t $i "source ~/.bashrc" Enter; done'

# Pass Kitty Key Codes (Ghostty terminal)
bind-key -n C-BSpace send-keys "\e[127;5u"
bind-key -n C-S-BSpace send-keys "\e[127;6u"
bind-key -n M-BSpace send-keys "\e[127;3u"
#
bind-key -n C-Enter send-keys "\e[13;5u"
#
bind-key -n C-m send-keys "\e[109;5u"
bind-key -n C-i send-keys "\e[105;5u"
bind-key -n M-w send-keys "\e[119;3u"

bind-key -n C-. send-keys "\e[46;5u"
bind-key -n C-3 send-keys "\e[51;5u"
bind-key -n C-/ send-keys "\e[47;5u"
bind-key -n "C-'" send-keys "\e[39;5u"
bind-key -n C-, send-keys "\e[44;5u"

# bind-key -n C-S-h send-keys "\e[104;6u"
# bind-key -n C-S-j send-keys "\e[106;6u"
# bind-key -n C-S-k send-keys "\e[107;6u"
# bind-key -n C-S-l send-keys "\e[108;6u"

###########################################################
# Replicate christoomey/vim-tmux-navigator for C-S mappings
###########################################################

# By default, tmux does not support the Kitty keyboard protocol
# But, because Neovim supports the kitty keyboard protocol, we can explicitly send the correct
# keycodes
# This frees up the shell's kill-line (ctrl+k) and clear terminal (ctrl+l) commands, as well as
# four home row maps in Neovim that aren't useful by default
# This also moves closer toward a layered pattern of mappings across applications:
# - Windows Key: i3
# - Shift+x or prefix: Terminal/Tmux
# - ctrl and/or enter: Individual applications

vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"

bind-key -n 'C-S-h' if-shell "$is_vim" 'send-keys "\e[104;6u"' 'select-pane -L'
bind-key -n 'C-S-j' if-shell "$is_vim" 'send-keys "\e[106;6u"' 'select-pane -D'
bind-key -n 'C-S-k' if-shell "$is_vim" 'send-keys "\e[107;6u"' 'select-pane -U'
bind-key -n 'C-S-l' if-shell "$is_vim" 'send-keys "\e[108;6u"' 'select-pane -R'

bind-key -T copy-mode-vi 'C-S-h' select-pane -L
bind-key -T copy-mode-vi 'C-S-j' select-pane -D
bind-key -T copy-mode-vi 'C-S-k' select-pane -U
bind-key -T copy-mode-vi 'C-S-l' select-pane -R
